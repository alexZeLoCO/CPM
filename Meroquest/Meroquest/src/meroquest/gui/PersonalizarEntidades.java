/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package meroquest.gui;

import javax.swing.JOptionPane;
import meroquest.data.EntityHashMap;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author Rodriguez Lopez, Alejandro // UO281827 
 */
public class PersonalizarEntidades extends javax.swing.JFrame {

	private final int BARBARO = 0;
	private final int ENANO = 1;
	private final int ENJAMBRE = 2;
	private final int GOBLIN = 3;
	private final int GUARDIAN = 4;
	private final int MOMIA = 5;
	private final int VAMPIRO = 6;
	private final int VIRUS = 7;

	private JSpinner[] entitiesSpinners;
	private JSlider[] entitiesSliders;
	private String entities[];

	/**
	 * Creates new form PersonalizarEntidades
	 */
	private PersonalizarEntidades() {
		initComponents();
		System.out.println("Creando personalizacion de entidades");
	}

	/**
	 * Crea una nueva ventana de personalizaci칩n de entidades con referencia a master.
	 * 
	 * @param master Referencia a ventana principal.
	 */
	public PersonalizarEntidades (master master) {
		this();
		this.entitiesSliders = new JSlider[]{SL_Barbaro, SL_Enano, SL_Enjambre, SL_Goblin, SL_Guardian, SL_Momia, SL_Vampiro, SL_Virus};
		this.entitiesSpinners= new JSpinner[]{SP_Barbaro, SP_Enano, SP_Enjambre, SP_Goblin, SP_Guardian, SP_Momia, SP_Vampiro, SP_Virus};
		this.entities = new String[] {"B치rbaro", "Enano", "Enjambre", "Goblin", "Guardi치n", "Momia", "Vampiro", "Virus"};
		
		this.previous = new EntityHashMap (entities);	// Crea estructura previa
		this.current = new EntityHashMap (entities);	// Crea estructura actual

		this.vM = master;	// Referencia a principal

		this.setLimites(this.vM.SL_Heroes.getValue(), this.vM.SL_Monstruos.getValue());
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jLabel1 = new javax.swing.JLabel();
                jPanel1 = new javax.swing.JPanel();
                jLabel2 = new javax.swing.JLabel();
                CB_Barbaro = new javax.swing.JCheckBox();
                SL_Barbaro = new javax.swing.JSlider();
                SP_Barbaro = new javax.swing.JSpinner();
                jLabel11 = new javax.swing.JLabel();
                CB_Enano = new javax.swing.JCheckBox();
                SL_Enano = new javax.swing.JSlider();
                SP_Enano = new javax.swing.JSpinner();
                jLabel10 = new javax.swing.JLabel();
                CB_Goblin = new javax.swing.JCheckBox();
                SL_Goblin = new javax.swing.JSlider();
                SP_Goblin = new javax.swing.JSpinner();
                jLabel8 = new javax.swing.JLabel();
                CB_Momia = new javax.swing.JCheckBox();
                SL_Momia = new javax.swing.JSlider();
                SP_Momia = new javax.swing.JSpinner();
                jLabel7 = new javax.swing.JLabel();
                CB_Enjambre = new javax.swing.JCheckBox();
                SL_Enjambre = new javax.swing.JSlider();
                SP_Enjambre = new javax.swing.JSpinner();
                jLabel6 = new javax.swing.JLabel();
                CB_Vampiro = new javax.swing.JCheckBox();
                SL_Vampiro = new javax.swing.JSlider();
                SP_Vampiro = new javax.swing.JSpinner();
                jLabel5 = new javax.swing.JLabel();
                CB_Virus = new javax.swing.JCheckBox();
                SL_Virus = new javax.swing.JSlider();
                SP_Virus = new javax.swing.JSpinner();
                jLabel4 = new javax.swing.JLabel();
                CB_Guardian = new javax.swing.JCheckBox();
                SL_Guardian = new javax.swing.JSlider();
                SP_Guardian = new javax.swing.JSpinner();
                BT_Aceptar = new javax.swing.JButton();
                BT_Cancelar = new javax.swing.JButton();
                jSeparator1 = new javax.swing.JSeparator();
                jLabel3 = new javax.swing.JLabel();
                LB_MRestantes = new javax.swing.JLabel();
                BT_Debug = new javax.swing.JButton();
                jLabel9 = new javax.swing.JLabel();
                LB_HRestantes = new javax.swing.JLabel();

                jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
                jLabel1.setText("Personalizar Entidades");

                jPanel1.setLayout(new java.awt.GridLayout(0, 4));

                jLabel2.setText("B치rbaro");
                jPanel1.add(jLabel2);

                CB_Barbaro.setSelected(true);
                CB_Barbaro.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CB_BarbaroActionPerformed(evt);
                        }
                });
                jPanel1.add(CB_Barbaro);

                SL_Barbaro.setMaximum(5);
                SL_Barbaro.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SL_BarbaroStateChanged(evt);
                        }
                });
                jPanel1.add(SL_Barbaro);

                SP_Barbaro.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
                SP_Barbaro.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SP_BarbaroStateChanged(evt);
                        }
                });
                jPanel1.add(SP_Barbaro);

                jLabel11.setText("Enano");
                jPanel1.add(jLabel11);

                CB_Enano.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CB_EnanoActionPerformed(evt);
                        }
                });
                jPanel1.add(CB_Enano);

                SL_Enano.setValue(0);
                SL_Enano.setEnabled(false);
                SL_Enano.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SL_EnanoStateChanged(evt);
                        }
                });
                jPanel1.add(SL_Enano);

                SP_Enano.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
                SP_Enano.setEnabled(false);
                SP_Enano.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SP_EnanoStateChanged(evt);
                        }
                });
                jPanel1.add(SP_Enano);

                jLabel10.setText("Goblin");
                jPanel1.add(jLabel10);

                CB_Goblin.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CB_GoblinActionPerformed(evt);
                        }
                });
                jPanel1.add(CB_Goblin);

                SL_Goblin.setValue(0);
                SL_Goblin.setEnabled(false);
                SL_Goblin.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SL_GoblinStateChanged(evt);
                        }
                });
                jPanel1.add(SL_Goblin);

                SP_Goblin.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
                SP_Goblin.setEnabled(false);
                SP_Goblin.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SP_GoblinStateChanged(evt);
                        }
                });
                jPanel1.add(SP_Goblin);

                jLabel8.setText("Momia");
                jPanel1.add(jLabel8);

                CB_Momia.setSelected(true);
                CB_Momia.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CB_MomiaActionPerformed(evt);
                        }
                });
                jPanel1.add(CB_Momia);

                SL_Momia.setMaximum(5);
                SL_Momia.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SL_MomiaStateChanged(evt);
                        }
                });
                jPanel1.add(SL_Momia);

                SP_Momia.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
                SP_Momia.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SP_MomiaStateChanged(evt);
                        }
                });
                jPanel1.add(SP_Momia);

                jLabel7.setText("Enjambre");
                jPanel1.add(jLabel7);

                CB_Enjambre.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CB_EnjambreActionPerformed(evt);
                        }
                });
                jPanel1.add(CB_Enjambre);

                SL_Enjambre.setValue(0);
                SL_Enjambre.setEnabled(false);
                SL_Enjambre.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SL_EnjambreStateChanged(evt);
                        }
                });
                jPanel1.add(SL_Enjambre);

                SP_Enjambre.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
                SP_Enjambre.setEnabled(false);
                SP_Enjambre.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SP_EnjambreStateChanged(evt);
                        }
                });
                jPanel1.add(SP_Enjambre);

                jLabel6.setText("Vampiro");
                jPanel1.add(jLabel6);

                CB_Vampiro.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CB_VampiroActionPerformed(evt);
                        }
                });
                jPanel1.add(CB_Vampiro);

                SL_Vampiro.setValue(0);
                SL_Vampiro.setEnabled(false);
                SL_Vampiro.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SL_VampiroStateChanged(evt);
                        }
                });
                jPanel1.add(SL_Vampiro);

                SP_Vampiro.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
                SP_Vampiro.setEnabled(false);
                SP_Vampiro.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SP_VampiroStateChanged(evt);
                        }
                });
                jPanel1.add(SP_Vampiro);

                jLabel5.setText("Virus");
                jPanel1.add(jLabel5);

                CB_Virus.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CB_VirusActionPerformed(evt);
                        }
                });
                jPanel1.add(CB_Virus);

                SL_Virus.setValue(0);
                SL_Virus.setEnabled(false);
                SL_Virus.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SL_VirusStateChanged(evt);
                        }
                });
                jPanel1.add(SL_Virus);

                SP_Virus.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
                SP_Virus.setEnabled(false);
                SP_Virus.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SP_VirusStateChanged(evt);
                        }
                });
                jPanel1.add(SP_Virus);

                jLabel4.setText("Guardi치n");
                jPanel1.add(jLabel4);

                CB_Guardian.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CB_GuardianActionPerformed(evt);
                        }
                });
                jPanel1.add(CB_Guardian);

                SL_Guardian.setToolTipText("");
                SL_Guardian.setValue(0);
                SL_Guardian.setEnabled(false);
                SL_Guardian.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SL_GuardianStateChanged(evt);
                        }
                });
                jPanel1.add(SL_Guardian);

                SP_Guardian.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
                SP_Guardian.setEnabled(false);
                SP_Guardian.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                SP_GuardianStateChanged(evt);
                        }
                });
                jPanel1.add(SP_Guardian);

                BT_Aceptar.setText("Aceptar");
                BT_Aceptar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                BT_AceptarActionPerformed(evt);
                        }
                });

                BT_Cancelar.setText("Cancelar");
                BT_Cancelar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                BT_CancelarActionPerformed(evt);
                        }
                });

                jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

                jLabel3.setText("Monstruos restantes:");

                LB_MRestantes.setText("100");

                BT_Debug.setText("Debug");
                BT_Debug.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                BT_DebugActionPerformed(evt);
                        }
                });

                jLabel9.setText("H칠roes Restantes:");

                LB_HRestantes.setText("100");

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(LB_MRestantes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(LB_HRestantes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(BT_Debug, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(BT_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(BT_Aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jSeparator1)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LB_MRestantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(BT_Debug)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(LB_HRestantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(BT_Aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(BT_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

	/**
	 * Retorna la estructura actual.
	 * 
	 * @return Estructura de entidades actual.
	 */
	public EntityHashMap getCurrent () {
		return this.current;
	}

	/**
	 * Se ha pulsado el bot칩n cancelar.
	 * 
	 * @param evt 
	 */
        private void BT_CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_CancelarActionPerformed
                // TODO add your handling code here:
	System.out.println("Cancelando sistema de entidades");
	if (JOptionPane.showConfirmDialog(null, "Est치 a punto de elminar la configuraci칩n actual. Confirme.", "Aviso", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
		this.vM.TK_Tick.setVisible(false);
		this.setVisible(false);
	}
	System.out.println("Cancelaci칩n abortada");
        }//GEN-LAST:event_BT_CancelarActionPerformed

	/**
	 * Se ha pulsado el bot칩n aceptar.
	 * 
	 * @param evt 
	 */
        private void BT_AceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_AceptarActionPerformed
                // TODO add your handling code here:
	System.out.println("Asignando sistema de entidades a estructura");
	this.vM.setEntities(this.current); 
	this.vM.TK_Tick.setVisible(true);
	this.setVisible (false);
        }//GEN-LAST:event_BT_AceptarActionPerformed

	/**
	 * Se ha modificado el valor del Slider del B치rbaro
	 * 
	 * @param evt 
	 */
        private void SL_BarbaroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_BarbaroStateChanged
                // TODO add your handling code here:
	System.out.println("Slider: Modificando Barbaro");
	if (Integer.parseInt(this.SP_Barbaro.getValue().toString()) != this.SL_Barbaro.getValue()) {
		this.SP_Barbaro.setValue(this.SL_Barbaro.getValue());
	}
	if (SL_Barbaro.getValue() > (Integer) this.previous.get(entities[BARBARO]).getSegundo() + this.heroesTotales - this.heroesMarcados) {
		SL_Barbaro.setValue(this.heroesTotales - this.heroesMarcados);
	} else {
		this.current.put(entities[BARBARO], SL_Barbaro.getValue());	// Actualizar valor actual
		this.heroesMarcados= this.heroesMarcados+ (this.SL_Barbaro.getValue() - (Integer) this.previous.get(entities[BARBARO]).getSegundo());	// Actualizar entidades marcadas
		this.previous.put(entities[BARBARO], (Integer) this.current.get(entities[BARBARO]).getSegundo());	// Actualizar previo para siguiente cambio
		this.LB_HRestantes.setText(String.format("%d", this.heroesTotales - this.heroesMarcados));

		this.vM.vD.update();
	}
        }//GEN-LAST:event_SL_BarbaroStateChanged

	/**
	 * Se ha modificado el Spinner del B치rbaro.
	 * 
	 * @param evt 
	 */
        private void SP_BarbaroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SP_BarbaroStateChanged
                // TODO add your handling code here:
	System.out.println("Spinner: Modificando Barbaro");
	if (Integer.parseInt(this.SP_Barbaro.getValue().toString()) != this.SL_Barbaro.getValue()) {
		this.SL_Barbaro.setValue(Integer.parseInt(this.SP_Barbaro.getValue().toString()));
	}
        }//GEN-LAST:event_SP_BarbaroStateChanged

	/**
	 * Se ha pulsado el bot칩n de mostrar vista previa.
	 * 
	 * @param evt 
	 */
        private void BT_DebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_DebugActionPerformed
                // TODO add your handling code here:
	System.out.println("Mostrando vista previa");
	this.vM.vD.setVisible(true);
        }//GEN-LAST:event_BT_DebugActionPerformed

	/**
	 * Se ha modificado el Slider del Enano.
	 * 
	 * @param evt 
	 */
        private void SL_EnanoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_EnanoStateChanged
                // TODO add your handling code here:
	System.out.println("Slider: Modificando Enano");
	if (Integer.parseInt(this.SP_Enano.getValue().toString()) != this.SL_Enano.getValue()) {
		this.SP_Enano.setValue(this.SL_Enano.getValue());
	}
	if (SL_Enano.getValue() > (Integer) this.previous.get(entities[ENANO]).getSegundo() + this.heroesTotales - this.heroesMarcados) {
		SL_Enano.setValue(this.heroesTotales- this.heroesMarcados);
	} else {
		this.current.put(entities[ENANO], SL_Enano.getValue());	// Actualizar valor actual
		this.heroesMarcados= this.heroesMarcados+ (this.SL_Enano.getValue() - (Integer) this.previous.get(entities[ENANO]).getSegundo());	// Actualizar entidades marcadas
		this.previous.put(entities[ENANO], (Integer) this.current.get(entities[ENANO]).getSegundo());	// Actualizar previo para siguiente cambio
		this.LB_HRestantes.setText(String.format("%d", this.heroesTotales - this.heroesMarcados));

		this.vM.vD.update();
	}
        }//GEN-LAST:event_SL_EnanoStateChanged

	/**
	 * Se ha modificado el Spinner del Enano.
	 * 
	 * @param evt 
	 */
        private void SP_EnanoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SP_EnanoStateChanged
                // TODO add your handling code here:
	System.out.println("Spinner: Modificando Enano");
	if (Integer.parseInt(this.SP_Enano.getValue().toString()) != this.SL_Enano.getValue()) {
		this.SL_Enano.setValue(Integer.parseInt(this.SP_Enano.getValue().toString()));
	}	
        }//GEN-LAST:event_SP_EnanoStateChanged

	/**
	 * Se ha modificado el estado del CheckBox del B치rbaro.
	 * 
	 * @param evt 
	 */
        private void CB_BarbaroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_BarbaroActionPerformed
                // TODO add your handling code here:
	System.out.println("Checkbox: Habilitando/Deshabilitando Barbaro");
	this.SL_Barbaro.setEnabled(this.CB_Barbaro.isSelected());
	this.SP_Barbaro.setEnabled(this.CB_Barbaro.isSelected());
	if (!this.CB_Barbaro.isSelected()) {
		this.SL_Barbaro.setValue(0);
	} 
        }//GEN-LAST:event_CB_BarbaroActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del Enano.
	 * 
	 * @param evt 
	 */
        private void CB_EnanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_EnanoActionPerformed
                // TODO add your handling code here:
	System.out.println("Checkbox: Habilitando/Deshabilitando Enano");
	this.SL_Enano.setEnabled(this.CB_Enano.isSelected());
	this.SP_Enano.setEnabled(this.CB_Enano.isSelected());
	if (!this.CB_Enano.isSelected()) {
		this.SL_Enano.setValue(0);
	} 
        }//GEN-LAST:event_CB_EnanoActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del Goblin.
	 * 
	 * @param evt 
	 */
        private void CB_GoblinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_GoblinActionPerformed
                // TODO add your handling code here: 
	System.out.println("Checkbox: Habilitando/Deshabilitando Goblin");
	this.SL_Goblin.setEnabled(this.CB_Goblin.isSelected());
	this.SP_Goblin.setEnabled(this.CB_Goblin.isSelected());
	if (!this.CB_Goblin.isSelected()) {
		this.SL_Goblin.setValue(0);
	} 
        }//GEN-LAST:event_CB_GoblinActionPerformed

	/**
	 * Se ha modificado el Slider del Goblin.
	 * 
	 * @param evt 
	 */
        private void SL_GoblinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_GoblinStateChanged
                // TODO add your handling code here:
	System.out.println("Slider: Modificando Goblin");
	if (Integer.parseInt(this.SP_Goblin.getValue().toString()) != this.SL_Goblin.getValue()) {
		this.SP_Goblin.setValue(this.SL_Goblin.getValue());
	}
	if (SL_Goblin.getValue() > (Integer) this.previous.get(entities[GOBLIN]).getSegundo() + this.monstruosTotales - this.monstruosMarcados) {
		SL_Goblin.setValue(this.monstruosTotales - this.monstruosMarcados);
	} else {
		this.current.put(entities[GOBLIN], SL_Goblin.getValue());	// Actualizar valor actual
		this.monstruosMarcados= this.monstruosMarcados+ (this.SL_Goblin.getValue() - (Integer) this.previous.get(entities[GOBLIN]).getSegundo());	// Actualizar entidades marcadas
		this.previous.put(entities[GOBLIN], (Integer) this.current.get(entities[GOBLIN]).getSegundo());	// Actualizar previo para siguiente cambio
		this.LB_MRestantes.setText(String.format("%d", this.monstruosTotales - this.monstruosMarcados));

		this.vM.vD.update();
	}
        }//GEN-LAST:event_SL_GoblinStateChanged

	/**
	 * Se ha modificado el Spinner del Goblin.
	 * 
	 * @param evt 
	 */
        private void SP_GoblinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SP_GoblinStateChanged
                // TODO add your handling code here:
	System.out.println("Spinner: Modificando Goblin");
	if (Integer.parseInt(this.SP_Goblin.getValue().toString()) != this.SL_Goblin.getValue()) {
		this.SL_Goblin.setValue(Integer.parseInt(this.SP_Goblin.getValue().toString()));
	}	
        }//GEN-LAST:event_SP_GoblinStateChanged

	/**
	 * Se ha modificado el estado del CheckBox de la Momia.
	 * 
	 * @param evt 
	 */
        private void CB_MomiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_MomiaActionPerformed
                // TODO add your handling code here:
	System.out.println("Checkbox: Habilitando/Deshabilitando Momia");
	this.SL_Momia.setEnabled(this.CB_Momia.isSelected());
	this.SP_Momia.setEnabled(this.CB_Momia.isSelected());
	if (!this.CB_Momia.isSelected()) {
		this.SL_Momia.setValue(0);
	} 
        
        }//GEN-LAST:event_CB_MomiaActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del Enjambre.
	 * 
	 * @param evt 
	 */
        private void CB_EnjambreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_EnjambreActionPerformed
                // TODO add your handling code here:
	System.out.println("Checkbox: Habilitando/Deshabilitando Enjambre");
	this.SL_Enjambre.setEnabled(this.CB_Enjambre.isSelected());
	this.SP_Enjambre.setEnabled(this.CB_Enjambre.isSelected());
	if (!this.CB_Enjambre.isSelected()) {
		this.SL_Enjambre.setValue(0);
	} 
        }//GEN-LAST:event_CB_EnjambreActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del Vampiro.
	 * 
	 * @param evt 
	 */
        private void CB_VampiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_VampiroActionPerformed
                // TODO add your handling code here:
	System.out.println("Checkbox: Habilitando/Deshabilitando Vampiro");
	this.SL_Vampiro.setEnabled(this.CB_Vampiro.isSelected());
	this.SP_Vampiro.setEnabled(this.CB_Vampiro.isSelected());
	if (!this.CB_Vampiro.isSelected()) {
		this.SL_Vampiro.setValue(0);
	} 
        }//GEN-LAST:event_CB_VampiroActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del Virus.
	 * 
	 * @param evt 
	 */
        private void CB_VirusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_VirusActionPerformed
                // TODO add your handling code here:
	System.out.println("Checkbox: Habilitando/Deshabilitando Virus");
	this.SL_Virus.setEnabled(this.CB_Virus.isSelected());
	this.SP_Virus.setEnabled(this.CB_Virus.isSelected());
	if (!this.CB_Virus.isSelected()) {
		this.SL_Virus.setValue(0);
	} 
        }//GEN-LAST:event_CB_VirusActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del Guard칤an.
	 * 
	 * @param evt 
	 */
        private void CB_GuardianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_GuardianActionPerformed
                // TODO add your handling code here:
	System.out.println("Checkbox: Habilitando/Deshabilitando Guardian");
	this.SL_Guardian.setEnabled(this.CB_Guardian.isSelected());
	this.SP_Guardian.setEnabled(this.CB_Guardian.isSelected());
	if (!this.CB_Guardian.isSelected()) {
		this.SL_Guardian.setValue(0);
	} 
        }//GEN-LAST:event_CB_GuardianActionPerformed

	/**
	 * Se ha modificado el Slider de la Momia.
	 * 
	 * @param evt 
	 */
        private void SL_MomiaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_MomiaStateChanged
                // TODO add your handling code here:
	System.out.println("Slider: Modificando Momia");
	if (Integer.parseInt(this.SP_Momia.getValue().toString()) != this.SL_Momia.getValue()) {
		this.SP_Momia.setValue(this.SL_Momia.getValue());
	}
	if (SL_Momia.getValue() > (Integer) this.previous.get(entities[MOMIA]).getSegundo() + this.monstruosTotales - this.monstruosMarcados) {
		SL_Momia.setValue(this.monstruosTotales - this.monstruosMarcados);
	} else {
		this.current.put(entities[MOMIA], SL_Momia.getValue());	// Actualizar valor actual
		this.monstruosMarcados= this.monstruosMarcados+ (this.SL_Momia.getValue() - (Integer) this.previous.get(entities[MOMIA]).getSegundo());	// Actualizar entidades marcadas
		this.previous.put(entities[MOMIA], (Integer) this.current.get(entities[MOMIA]).getSegundo());	// Actualizar previo para siguiente cambio
		this.LB_MRestantes.setText(String.format("%d", this.monstruosTotales - this.monstruosMarcados));

		this.vM.vD.update();
	}
        }//GEN-LAST:event_SL_MomiaStateChanged
	
	/**
	 * Se ha modificado el Slider del Enjambre.
	 * 
	 * @param evt 
	 */
        private void SL_EnjambreStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_EnjambreStateChanged
                // TODO add your handling code here:
	System.out.println("Slider: Modificando Enjambre");
	if (Integer.parseInt(this.SP_Enjambre.getValue().toString()) != this.SL_Enjambre.getValue()) {
		this.SP_Enjambre.setValue(this.SL_Enjambre.getValue());
	}
	if (SL_Enjambre.getValue() > (Integer) this.previous.get(entities[ENJAMBRE]).getSegundo() + this.monstruosTotales - this.monstruosMarcados) {
		SL_Enjambre.setValue(this.monstruosTotales - this.monstruosMarcados);
	} else {
		this.current.put(entities[ENJAMBRE], SL_Enjambre.getValue());	// Actualizar valor actual
		this.monstruosMarcados= this.monstruosMarcados+ (this.SL_Enjambre.getValue() - (Integer) this.previous.get(entities[ENJAMBRE]).getSegundo());	// Actualizar entidades marcadas
		this.previous.put(entities[ENJAMBRE], (Integer) this.current.get(entities[ENJAMBRE]).getSegundo());	// Actualizar previo para siguiente cambio
		this.LB_MRestantes.setText(String.format("%d", this.monstruosTotales - this.monstruosMarcados));

		this.vM.vD.update();
	}
        }//GEN-LAST:event_SL_EnjambreStateChanged
	
	/**
	 * Se ha modificado el Slider del Vampiro.
	 * 
	 * @param evt 
	 */
        private void SL_VampiroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_VampiroStateChanged
                // TODO add your handling code here:
	System.out.println("Slider: Modificando Vampiro");
	if (Integer.parseInt(this.SP_Vampiro.getValue().toString()) != this.SL_Vampiro.getValue()) {
		this.SP_Vampiro.setValue(this.SL_Vampiro.getValue());
	}
	if (SL_Vampiro.getValue() > (Integer) this.previous.get(entities[VAMPIRO]).getSegundo() + this.monstruosTotales - this.monstruosMarcados) {
		SL_Vampiro.setValue(this.monstruosTotales - this.monstruosMarcados);
	} else {
		this.current.put(entities[VAMPIRO], SL_Vampiro.getValue());	// Actualizar valor actual
		this.monstruosMarcados = this.monstruosMarcados+ (this.SL_Vampiro.getValue() - (Integer) this.previous.get(entities[VAMPIRO]).getSegundo());	// Actualizar entidades marcadas
		this.previous.put(entities[VAMPIRO], (Integer) this.current.get(entities[VAMPIRO]).getSegundo());	// Actualizar previo para siguiente cambio
		this.LB_MRestantes.setText(String.format("%d", this.monstruosTotales - this.monstruosMarcados));

		this.vM.vD.update();
	}
        }//GEN-LAST:event_SL_VampiroStateChanged
	
	/**
	 * Se ha modificado el Slider del Virus.
	 * 
	 * @param evt 
	 */
        private void SL_VirusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_VirusStateChanged
                // TODO add your handling code here:
	System.out.println("Slider: Modificando Virus");
	if (Integer.parseInt(this.SP_Virus.getValue().toString()) != this.SL_Virus.getValue()) {
		this.SP_Virus.setValue(this.SL_Virus.getValue());
	}
	if (SL_Virus.getValue() > (Integer) this.previous.get(entities[VIRUS]).getSegundo() + this.monstruosTotales - this.monstruosMarcados) {
		SL_Virus.setValue(this.monstruosTotales - this.monstruosMarcados);
	} else {
		this.current.put(entities[VIRUS], SL_Virus.getValue());	// Actualizar valor actual
		this.monstruosMarcados= this.monstruosMarcados+ (this.SL_Virus.getValue() - (Integer) this.previous.get(entities[VIRUS]).getSegundo());	// Actualizar entidades marcadas
		this.previous.put(entities[VIRUS], (Integer) this.current.get(entities[VIRUS]).getSegundo());	// Actualizar previo para siguiente cambio
		this.LB_MRestantes.setText(String.format("%d", this.monstruosTotales - this.monstruosMarcados));

		this.vM.vD.update();
	}
        }//GEN-LAST:event_SL_VirusStateChanged
	
	/**
	 * Se ha modificado el Slider del Guardi치n.
	 * 
	 * @param evt 
	 */
        private void SL_GuardianStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_GuardianStateChanged
                // TODO add your handling code here:
	System.out.println("Slider: Modificando Guardian");
	if (Integer.parseInt(this.SP_Guardian.getValue().toString()) != this.SL_Guardian.getValue()) {
		this.SP_Guardian.setValue(this.SL_Guardian.getValue());
	}
	if (SL_Guardian.getValue() > (Integer) this.previous.get(entities[GUARDIAN]).getSegundo() + this.monstruosTotales - this.monstruosMarcados ||
		SL_Guardian.getValue() > (Integer) this.previous.get(entities[GUARDIAN]).getSegundo() + this.heroesTotales - this.heroesMarcados) {
		SL_Guardian.setValue(Math.min(this.monstruosTotales - this.monstruosMarcados,  this.heroesTotales - this.heroesMarcados));
	} else {
		this.current.put(entities[GUARDIAN], SL_Guardian.getValue());	// Actualizar valor actual
		this.heroesMarcados = this.heroesMarcados + (this.SL_Guardian.getValue() - (Integer) this.previous.get(entities[GUARDIAN]).getSegundo());	// Actualizar entidades marcadas
		this.monstruosMarcados  = this.monstruosMarcados + (this.SL_Guardian.getValue() - (Integer) this.previous.get(entities[GUARDIAN]).getSegundo());	// Actualizar entidades marcadas
		this.previous.put(entities[GUARDIAN], (Integer) this.current.get(entities[GUARDIAN]).getSegundo());	// Actualizar previo para siguiente cambio
		this.LB_MRestantes.setText(String.format("%d", this.monstruosTotales - this.monstruosMarcados));
		this.LB_HRestantes.setText(String.format("%d", this.heroesTotales - this.heroesMarcados));

		this.vM.vD.update();
	}
        }//GEN-LAST:event_SL_GuardianStateChanged
	
	/**
	 * Se ha modificado el Spinner de la Momia.
	 * 
	 * @param evt 
	 */
        private void SP_MomiaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SP_MomiaStateChanged
                // TODO add your handling code here:
	System.out.println("Spinner: Modificando Momia");
	if (Integer.parseInt(this.SP_Momia.getValue().toString()) != this.SL_Momia.getValue()) {
		this.SL_Momia.setValue(Integer.parseInt(this.SP_Momia.getValue().toString()));
	}	
        }//GEN-LAST:event_SP_MomiaStateChanged
	
	/**
	 * Se ha modificado el Spinner del Enjambre.
	 * 
	 * @param evt 
	 */
        private void SP_EnjambreStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SP_EnjambreStateChanged
                // TODO add your handling code here:
	System.out.println("Spinner: Modificando Enjambre");
	if (Integer.parseInt(this.SP_Enjambre.getValue().toString()) != this.SL_Enjambre.getValue()) {
		this.SL_Enjambre.setValue(Integer.parseInt(this.SP_Enjambre.getValue().toString()));
	}	
        }//GEN-LAST:event_SP_EnjambreStateChanged
	
	/**
	 * Se ha modificado el Spinner del Vampiro
	 * 
	 * @param evt 
	 */
        private void SP_VampiroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SP_VampiroStateChanged
                // TODO add your handling code here:
	System.out.println("Spinner: Modificando Vampiro");
	if (Integer.parseInt(this.SP_Vampiro.getValue().toString()) != this.SL_Vampiro.getValue()) {
		this.SL_Vampiro.setValue(Integer.parseInt(this.SP_Vampiro.getValue().toString()));
	}	
        }//GEN-LAST:event_SP_VampiroStateChanged

	/**
	 * Se ha modificado el Spinner del Virus.
	 * 
	 * @param evt 
	 */
        private void SP_VirusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SP_VirusStateChanged
                // TODO add your handling code here:
	System.out.println("Spinner: Modificando Virus");
	if (Integer.parseInt(this.SP_Virus.getValue().toString()) != this.SL_Virus.getValue()) {
		this.SL_Virus.setValue(Integer.parseInt(this.SP_Virus.getValue().toString()));
	}	
        }//GEN-LAST:event_SP_VirusStateChanged

	/**
	 * Se ha modificado el Spinner del Guardi치n.
	 * 
	 * @param evt 
	 */
        private void SP_GuardianStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SP_GuardianStateChanged
                // TODO add your handling code here:
	System.out.println("Spinner: Modificando Guardian");
	if (Integer.parseInt(this.SP_Guardian.getValue().toString()) != this.SL_Guardian.getValue()) {
		this.SL_Guardian.setValue(Integer.parseInt(this.SP_Guardian.getValue().toString()));
	}	
        }//GEN-LAST:event_SP_GuardianStateChanged

	/**
	 * Asigna los l칤mites a todos los sliders, spinners y etiquetas de la pantalla.
	 * 
	 * @param heroes N칰mero m치ximo de h칠roes.
	 * @param monstruos N칰mero m치ximo de monstruos.
	 */
	public void setLimites (int heroes, int monstruos) {
		this.monstruosTotales = monstruos;	// Monstruos totales
		this.heroesTotales = heroes;		 // Heroes totales

		// Estado inicial de estructura, sliders y spinners.
		for (int i = 0; i < 8 ; i++) {
			this.previous.put(entities[i], 0);
			this.current.put(entities[i], 0);
			this.entitiesSliders[i].setMaximum(this.monstruosTotales);				
			this.entitiesSpinners[i].setModel(new SpinnerNumberModel (Integer.parseInt(String.format("%d", this.entitiesSpinners[i].getModel().getValue())), 0, this.monstruosTotales, 1));
		}
	
		// Maximos de sliders y spinners para heroes
		this.entitiesSpinners[ENANO].setModel(new SpinnerNumberModel (Integer.parseInt(String.format("%d", this.entitiesSpinners[ENANO].getModel().getValue())), 0, this.heroesTotales, 1));
		this.entitiesSpinners[BARBARO].setModel(new SpinnerNumberModel (Integer.parseInt(String.format("%d", this.entitiesSpinners[BARBARO].getModel().getValue())), 0, this.heroesTotales, 1));
		this.SL_Barbaro.setMaximum(this.heroesTotales);
		this.SL_Enano.setMaximum(this.heroesTotales);
		
		// Valores por defecto de heroes y monstruos
		this.SL_Barbaro.setValue(this.heroesTotales);
		this.SL_Momia.setValue(this.monstruosTotales);
		this.SP_Barbaro.setValue(this.heroesTotales);
		this.SP_Momia.setValue(this.monstruosTotales);

		// Contadores de entidades marcadas
		this.heroesMarcados = this.SL_Barbaro.getValue();
		this.monstruosMarcados = this.SL_Momia.getValue();

		// Actualizaci칩n de estructuras
		// NOTA: JSlider.setValue(Integer) no acciona un stateChanged.
		this.previous.put(entities[BARBARO], this.SL_Barbaro.getValue());		
		this.current.put(entities[BARBARO], this.SL_Barbaro.getValue());
		this.previous.put(entities[MOMIA], this.SL_Momia.getValue());		
		this.current.put(entities[MOMIA], this.SL_Momia.getValue());

		// Actualizacion de etiquetas
		this.LB_HRestantes.setText(String.format("%d", this.heroesTotales - this.heroesMarcados));
		this.LB_MRestantes.setText(String.format("%d", this.monstruosTotales - this.monstruosMarcados));
	}

	/**
	 * Actualiza los l칤mites de todos los Sliders.
	 * 
	 * @param restantes Entidades restantes.
	 * @deprecated Funcionamiento incorrecto. Soluci칩n m치s eficiente encontrada.
	 */
	@Deprecated
	private void actualizarLimites (int restantes) {
		System.out.println("Actualizando maximos de entidades");
		if (SL_Barbaro.getMaximum() != this.SL_Barbaro.getValue() + restantes) {
			this.SL_Barbaro.setMaximum(this.SL_Barbaro.getValue() + restantes);
		}
		if (SL_Enano.getMaximum() != this.SL_Enano.getValue() + restantes) {
			this.SL_Enano.setMaximum(this.SL_Enano.getValue() + restantes);
		}
		if (SL_Enjambre.getMaximum() != this.SL_Enjambre.getValue() + restantes) {
			this.SL_Enjambre.setMaximum(this.SL_Enjambre.getValue() + restantes);
		}
		if (SL_Goblin.getMaximum() != this.SL_Goblin.getValue() + restantes) {
			this.SL_Goblin.setMaximum(this.SL_Goblin.getValue() + restantes);
		}
		if (SL_Guardian.getMaximum() != this.SL_Guardian.getValue() + restantes) {
			this.SL_Guardian.setMaximum(this.SL_Guardian.getValue() + restantes);
		}
		if (SL_Momia.getMaximum() != this.SL_Momia.getValue() + restantes) {
			this.SL_Momia.setMaximum(this.SL_Momia.getValue() + restantes);
		}
		if (SL_Vampiro.getMaximum() != this.SL_Vampiro.getValue() + restantes) {
			this.SL_Vampiro.setMaximum(this.SL_Vampiro.getValue() + restantes);
		}
		if (SL_Virus.getMaximum() != this.SL_Virus.getValue() + restantes) {
			this.SL_Virus.setMaximum(this.SL_Vampiro.getValue() + restantes);
		}
		this.LB_MRestantes.setText(String.format("%d", this.monstruosTotales - this.monstruosMarcados));
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(PersonalizarEntidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(PersonalizarEntidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(PersonalizarEntidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(PersonalizarEntidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new PersonalizarEntidades().setVisible(true);
			}
		});
	}

	private EntityHashMap current;
	private EntityHashMap previous;

	private int monstruosMarcados;	
	private int monstruosTotales;	
	private int heroesTotales;
	private int heroesMarcados;

	master vM;
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton BT_Aceptar;
        private javax.swing.JButton BT_Cancelar;
        private javax.swing.JButton BT_Debug;
        private javax.swing.JCheckBox CB_Barbaro;
        private javax.swing.JCheckBox CB_Enano;
        private javax.swing.JCheckBox CB_Enjambre;
        private javax.swing.JCheckBox CB_Goblin;
        private javax.swing.JCheckBox CB_Guardian;
        private javax.swing.JCheckBox CB_Momia;
        private javax.swing.JCheckBox CB_Vampiro;
        private javax.swing.JCheckBox CB_Virus;
        private javax.swing.JLabel LB_HRestantes;
        private javax.swing.JLabel LB_MRestantes;
        private javax.swing.JSlider SL_Barbaro;
        private javax.swing.JSlider SL_Enano;
        private javax.swing.JSlider SL_Enjambre;
        private javax.swing.JSlider SL_Goblin;
        private javax.swing.JSlider SL_Guardian;
        private javax.swing.JSlider SL_Momia;
        private javax.swing.JSlider SL_Vampiro;
        private javax.swing.JSlider SL_Virus;
        private javax.swing.JSpinner SP_Barbaro;
        private javax.swing.JSpinner SP_Enano;
        private javax.swing.JSpinner SP_Enjambre;
        private javax.swing.JSpinner SP_Goblin;
        private javax.swing.JSpinner SP_Guardian;
        private javax.swing.JSpinner SP_Momia;
        private javax.swing.JSpinner SP_Vampiro;
        private javax.swing.JSpinner SP_Virus;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel10;
        private javax.swing.JLabel jLabel11;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JLabel jLabel5;
        private javax.swing.JLabel jLabel6;
        private javax.swing.JLabel jLabel7;
        private javax.swing.JLabel jLabel8;
        private javax.swing.JLabel jLabel9;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JSeparator jSeparator1;
        // End of variables declaration//GEN-END:variables
}
