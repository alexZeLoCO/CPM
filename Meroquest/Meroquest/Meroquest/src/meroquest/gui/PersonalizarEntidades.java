/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package meroquest.gui;

import javax.swing.JOptionPane;
import meroquest.data.EntityHashMap;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author Rodriguez Lopez, Alejandro // UO281827
 */
public class PersonalizarEntidades extends javax.swing.JFrame {

	private final int BARBARIAN = 0;
	private final int DWARF = 1;
	private final int SWARM = 2;
	private final int GOBLIN = 3;
	private final int GUARDIAN = 4;
	private final int MUMMY = 5;
	private final int VAMPIRE = 6;
	private final int VIRUS = 7;

	private JSpinner[] entitiesSpinners;
	private JSlider[] entitiesSliders;
	private String entities[];

	/**
	 * Creates new form PersonalizarEntidades
	 */
	private PersonalizarEntidades() {
		initComponents();
		System.out.println("Entity customization: Creating new Entity Customization");
	}

	/**
	 * Creates new form EntityCustomization with a reference to Master.
	 * 
	 * @param master Main window reference.
	 */
	public PersonalizarEntidades(master master) {
		this();
		this.entitiesSliders = new JSlider[] { SL_Barbarian, SL_Dwarf, SL_Enjambre, SL_Goblin, SL_Guardian, SL_Mummy,
				SL_Vampire, SL_Virus };
		this.entitiesSpinners = new JSpinner[] { SP_Barbarian, SP_Dwarf, SP_Enjambre, SP_Goblin, SP_Guardian, SP_Mummy,
				SP_Vampire, SP_Virus };
		this.entities = new String[] { "barbarian", "dwarf", "swarm", "goblin", "guardian", "mummy", "vampire",
				"Virus" };

		this.previous = new EntityHashMap(entities); // Crea estructura previa
		this.current = new EntityHashMap(entities); // Crea estructura actual

		this.vM = master; // Referencia a principal

		this.setLimites(this.vM.SL_Heroes.getValue(), this.vM.SL_Monstruos.getValue());
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jPanel1 = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		CB_Barbarian = new javax.swing.JCheckBox();
		SL_Barbarian = new javax.swing.JSlider();
		SP_Barbarian = new javax.swing.JSpinner();
		jLabel11 = new javax.swing.JLabel();
		CB_Dwarf = new javax.swing.JCheckBox();
		SL_Dwarf = new javax.swing.JSlider();
		SP_Dwarf = new javax.swing.JSpinner();
		jLabel10 = new javax.swing.JLabel();
		CB_Goblin = new javax.swing.JCheckBox();
		SL_Goblin = new javax.swing.JSlider();
		SP_Goblin = new javax.swing.JSpinner();
		jLabel8 = new javax.swing.JLabel();
		CB_Mummy = new javax.swing.JCheckBox();
		SL_Mummy = new javax.swing.JSlider();
		SP_Mummy = new javax.swing.JSpinner();
		jLabel7 = new javax.swing.JLabel();
		CB_Enjambre = new javax.swing.JCheckBox();
		SL_Enjambre = new javax.swing.JSlider();
		SP_Enjambre = new javax.swing.JSpinner();
		jLabel6 = new javax.swing.JLabel();
		CB_Vampire = new javax.swing.JCheckBox();
		SL_Vampire = new javax.swing.JSlider();
		SP_Vampire = new javax.swing.JSpinner();
		jLabel5 = new javax.swing.JLabel();
		CB_Virus = new javax.swing.JCheckBox();
		SL_Virus = new javax.swing.JSlider();
		SP_Virus = new javax.swing.JSpinner();
		jLabel4 = new javax.swing.JLabel();
		CB_Guardian = new javax.swing.JCheckBox();
		SL_Guardian = new javax.swing.JSlider();
		SP_Guardian = new javax.swing.JSpinner();
		BT_Aceptar = new javax.swing.JButton();
		BT_Cancelar = new javax.swing.JButton();
		jSeparator1 = new javax.swing.JSeparator();
		jLabel3 = new javax.swing.JLabel();
		LB_MRestantes = new javax.swing.JLabel();
		BT_VistaPrevia = new javax.swing.JButton();
		jLabel9 = new javax.swing.JLabel();
		LB_HRestantes = new javax.swing.JLabel();

		jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
		jLabel1.setText("Entity Customization");

		jPanel1.setLayout(new java.awt.GridLayout(0, 4));

		jLabel2.setText("Barbarian");
		jPanel1.add(jLabel2);

		CB_Barbarian.setSelected(true);
		CB_Barbarian.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CB_BarbarianActionPerformed(evt);
			}
		});
		jPanel1.add(CB_Barbarian);

		SL_Barbarian.setMaximum(5);
		SL_Barbarian.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SL_BarbarianStateChanged(evt);
			}
		});
		jPanel1.add(SL_Barbarian);

		SP_Barbarian.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
		SP_Barbarian.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SP_BarbarianStateChanged(evt);
			}
		});
		jPanel1.add(SP_Barbarian);

		jLabel11.setText("Dwarf");
		jPanel1.add(jLabel11);

		CB_Dwarf.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CB_DwarfActionPerformed(evt);
			}
		});
		jPanel1.add(CB_Dwarf);

		SL_Dwarf.setValue(0);
		SL_Dwarf.setEnabled(false);
		SL_Dwarf.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SL_DwarfStateChanged(evt);
			}
		});
		jPanel1.add(SL_Dwarf);

		SP_Dwarf.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
		SP_Dwarf.setEnabled(false);
		SP_Dwarf.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SP_DwarfStateChanged(evt);
			}
		});
		jPanel1.add(SP_Dwarf);

		jLabel10.setText("goblin");
		jPanel1.add(jLabel10);

		CB_Goblin.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CB_GoblinActionPerformed(evt);
			}
		});
		jPanel1.add(CB_Goblin);

		SL_Goblin.setValue(0);
		SL_Goblin.setEnabled(false);
		SL_Goblin.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SL_GoblinStateChanged(evt);
			}
		});
		jPanel1.add(SL_Goblin);

		SP_Goblin.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
		SP_Goblin.setEnabled(false);
		SP_Goblin.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SP_GoblinStateChanged(evt);
			}
		});
		jPanel1.add(SP_Goblin);

		jLabel8.setText("Mummy");
		jPanel1.add(jLabel8);

		CB_Mummy.setSelected(true);
		CB_Mummy.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CB_MummyActionPerformed(evt);
			}
		});
		jPanel1.add(CB_Mummy);

		SL_Mummy.setMaximum(5);
		SL_Mummy.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SL_MummyStateChanged(evt);
			}
		});
		jPanel1.add(SL_Mummy);

		SP_Mummy.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
		SP_Mummy.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SP_MummyStateChanged(evt);
			}
		});
		jPanel1.add(SP_Mummy);

		jLabel7.setText("Swarm");
		jPanel1.add(jLabel7);

		CB_Enjambre.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CB_EnjambreActionPerformed(evt);
			}
		});
		jPanel1.add(CB_Enjambre);

		SL_Enjambre.setValue(0);
		SL_Enjambre.setEnabled(false);
		SL_Enjambre.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SL_EnjambreStateChanged(evt);
			}
		});
		jPanel1.add(SL_Enjambre);

		SP_Enjambre.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
		SP_Enjambre.setEnabled(false);
		SP_Enjambre.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SP_EnjambreStateChanged(evt);
			}
		});
		jPanel1.add(SP_Enjambre);

		jLabel6.setText("Vampire");
		jPanel1.add(jLabel6);

		CB_Vampire.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CB_VampireActionPerformed(evt);
			}
		});
		jPanel1.add(CB_Vampire);

		SL_Vampire.setValue(0);
		SL_Vampire.setEnabled(false);
		SL_Vampire.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SL_VampireStateChanged(evt);
			}
		});
		jPanel1.add(SL_Vampire);

		SP_Vampire.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
		SP_Vampire.setEnabled(false);
		SP_Vampire.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SP_VampireStateChanged(evt);
			}
		});
		jPanel1.add(SP_Vampire);

		jLabel5.setText("Virus");
		jPanel1.add(jLabel5);

		CB_Virus.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CB_VirusActionPerformed(evt);
			}
		});
		jPanel1.add(CB_Virus);

		SL_Virus.setValue(0);
		SL_Virus.setEnabled(false);
		SL_Virus.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SL_VirusStateChanged(evt);
			}
		});
		jPanel1.add(SL_Virus);

		SP_Virus.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
		SP_Virus.setEnabled(false);
		SP_Virus.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SP_VirusStateChanged(evt);
			}
		});
		jPanel1.add(SP_Virus);

		jLabel4.setText("Guardian");
		jPanel1.add(jLabel4);

		CB_Guardian.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CB_GuardianActionPerformed(evt);
			}
		});
		jPanel1.add(CB_Guardian);

		SL_Guardian.setToolTipText("");
		SL_Guardian.setValue(0);
		SL_Guardian.setEnabled(false);
		SL_Guardian.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SL_GuardianStateChanged(evt);
			}
		});
		jPanel1.add(SL_Guardian);

		SP_Guardian.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
		SP_Guardian.setEnabled(false);
		SP_Guardian.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				SP_GuardianStateChanged(evt);
			}
		});
		jPanel1.add(SP_Guardian);

		BT_Aceptar.setText("Accept");
		BT_Aceptar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				BT_AceptarActionPerformed(evt);
			}
		});

		BT_Cancelar.setText("Cancel");
		BT_Cancelar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				BT_CancelarActionPerformed(evt);
			}
		});

		jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

		jLabel3.setText("Remaining monsters:");

		LB_MRestantes.setText("100");

		BT_VistaPrevia.setText("Preview");
		BT_VistaPrevia.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				BT_VistaPreviaActionPerformed(evt);
			}
		});

		jLabel9.setText("Remaining Heroes:");

		LB_HRestantes.setText("100");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING,
												javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
										.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout
												.createSequentialGroup()
												.addComponent(jLabel1)
												.addGap(18, 18, 18)
												.addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 118,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(LB_MRestantes)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(jLabel9)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(LB_HRestantes)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(BT_VistaPrevia, javax.swing.GroupLayout.PREFERRED_SIZE,
														203, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(layout.createSequentialGroup()
												.addComponent(BT_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 204,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(BT_Aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 204,
														javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap()));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jSeparator1)
										.addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(LB_HRestantes, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addGroup(layout.createSequentialGroup()
												.addComponent(BT_VistaPrevia)
												.addGap(0, 0, Short.MAX_VALUE))
										.addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(LB_MRestantes, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(BT_Aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 42,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(BT_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 42,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * Retorna la estructura actual.
	 * 
	 * @return Estructura de entidades actual.
	 */
	public EntityHashMap getCurrent() {
		return this.current;
	}

	/**
	 * Se ha pulsado el botón cancelar.
	 * 
	 * @param evt
	 */
	private void BT_CancelarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_BT_CancelarActionPerformed
		// TODO add your handling code here:
		System.out.println("Entity customization: Removing entity system");
		if (JOptionPane.showConfirmDialog(null, "The current entity system will be deleted. Do you want to proceed?",
				"Information", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
			this.vM.TK_Tick.setVisible(false);
			this.setVisible(false);
		}
		System.out.println("Entity customization: Removal has been aborted");
	}// GEN-LAST:event_BT_CancelarActionPerformed

	/**
	 * Se ha pulsado el botón aceptar.
	 * 
	 * @param evt
	 */
	private void BT_AceptarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_BT_AceptarActionPerformed
		// TODO add your handling code here:
		System.out.println("Entity customization: Assigning entity system to actual data structure");
		this.vM.setEntities(this.current);
		this.vM.TK_Tick.setVisible(true);
		this.setVisible(false);
	}// GEN-LAST:event_BT_AceptarActionPerformed

	/**
	 * Se ha modificado el valor del Slider del barbarian
	 * 
	 * @param evt
	 */
	private void SL_BarbarianStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SL_BarbarianStateChanged
		// TODO add your handling code here:
		System.out.println("Slider: Barbarian modification");
		if (Integer.parseInt(this.SP_Barbarian.getValue().toString()) != this.SL_Barbarian.getValue()) {
			this.SP_Barbarian.setValue(this.SL_Barbarian.getValue());
		}
		if (SL_Barbarian.getValue() > (Integer) this.previous.get(entities[BARBARIAN]).getSecond() + this.totalHeroes
				- this.markedHeroes) {
			SL_Barbarian.setValue(this.totalHeroes - this.markedHeroes);
		} else {
			this.current.put(entities[BARBARIAN], SL_Barbarian.getValue()); // Actualizar valor actual
			this.markedHeroes = this.markedHeroes
					+ (this.SL_Barbarian.getValue() - (Integer) this.previous.get(entities[BARBARIAN]).getSecond()); // Actualizar
																														// entidades
																														// marcadas
			this.previous.put(entities[BARBARIAN], (Integer) this.current.get(entities[BARBARIAN]).getSecond()); // Actualizar
																													// previo
																													// para
																													// siguiente
																													// cambio
			this.LB_HRestantes.setText(String.format("%d", this.totalHeroes - this.markedHeroes));

			this.vM.vD.update();
		}
	}// GEN-LAST:event_SL_BarbarianStateChanged

	/**
	 * Se ha modificado el Spinner del barbarian.
	 * 
	 * @param evt
	 */
	private void SP_BarbarianStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SP_BarbarianStateChanged
		// TODO add your handling code here:
		System.out.println("Spinner: Barbarian modification");
		if (Integer.parseInt(this.SP_Barbarian.getValue().toString()) != this.SL_Barbarian.getValue()) {
			this.SL_Barbarian.setValue(Integer.parseInt(this.SP_Barbarian.getValue().toString()));
		}
	}// GEN-LAST:event_SP_BarbarianStateChanged

	/**
	 * Se ha pulsado el botón de mostrar vista previa.
	 * 
	 * @param evt
	 */
	private void BT_VistaPreviaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_BT_VistaPreviaActionPerformed
		// TODO add your handling code here:
		System.out.println("Entity Customization: Showing preview");
		this.vM.vD.setVisible(true);
	}// GEN-LAST:event_BT_VistaPreviaActionPerformed

	/**
	 * Se ha modificado el Slider del dwarf.
	 * 
	 * @param evt
	 */
	private void SL_DwarfStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SL_DwarfStateChanged
		// TODO add your handling code here:
		System.out.println("Slider: Dwarf modification");
		if (Integer.parseInt(this.SP_Dwarf.getValue().toString()) != this.SL_Dwarf.getValue()) {
			this.SP_Dwarf.setValue(this.SL_Dwarf.getValue());
		}
		if (SL_Dwarf.getValue() > (Integer) this.previous.get(entities[DWARF]).getSecond() + this.totalHeroes
				- this.markedHeroes) {
			SL_Dwarf.setValue(this.totalHeroes - this.markedHeroes);
		} else {
			this.current.put(entities[DWARF], SL_Dwarf.getValue()); // Actualizar valor actual
			this.markedHeroes = this.markedHeroes
					+ (this.SL_Dwarf.getValue() - (Integer) this.previous.get(entities[DWARF]).getSecond()); // Actualizar
																												// entidades
																												// marcadas
			this.previous.put(entities[DWARF], (Integer) this.current.get(entities[DWARF]).getSecond()); // Actualizar
																											// previo
																											// para
																											// siguiente
																											// cambio
			this.LB_HRestantes.setText(String.format("%d", this.totalHeroes - this.markedHeroes));

			this.vM.vD.update();
		}
	}// GEN-LAST:event_SL_DwarfStateChanged

	/**
	 * Se ha modificado el Spinner del dwarf.
	 * 
	 * @param evt
	 */
	private void SP_DwarfStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SP_DwarfStateChanged
		// TODO add your handling code here:
		System.out.println("Spinner: Dwarf modification");
		if (Integer.parseInt(this.SP_Dwarf.getValue().toString()) != this.SL_Dwarf.getValue()) {
			this.SL_Dwarf.setValue(Integer.parseInt(this.SP_Dwarf.getValue().toString()));
		}
	}// GEN-LAST:event_SP_DwarfStateChanged

	/**
	 * Se ha modificado el estado del CheckBox del barbarian.
	 * 
	 * @param evt
	 */
	private void CB_BarbarianActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CB_BarbarianActionPerformed
		// TODO add your handling code here:
		System.out.println("Checkbox: Enabling/Disabling Barbarian");
		this.SL_Barbarian.setEnabled(this.CB_Barbarian.isSelected());
		this.SP_Barbarian.setEnabled(this.CB_Barbarian.isSelected());
		if (!this.CB_Barbarian.isSelected()) {
			this.SL_Barbarian.setValue(0);
		}
	}// GEN-LAST:event_CB_BarbarianActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del dwarf.
	 * 
	 * @param evt
	 */
	private void CB_DwarfActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CB_DwarfActionPerformed
		// TODO add your handling code here:
		System.out.println("Checkbox: Enabling/Disabling Dwarf");
		this.SL_Dwarf.setEnabled(this.CB_Dwarf.isSelected());
		this.SP_Dwarf.setEnabled(this.CB_Dwarf.isSelected());
		if (!this.CB_Dwarf.isSelected()) {
			this.SL_Dwarf.setValue(0);
		}
	}// GEN-LAST:event_CB_DwarfActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del goblin.
	 * 
	 * @param evt
	 */
	private void CB_GoblinActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CB_GoblinActionPerformed
		// TODO add your handling code here:
		System.out.println("Checkbox: Enabling/Disabling goblin");
		this.SL_Goblin.setEnabled(this.CB_Goblin.isSelected());
		this.SP_Goblin.setEnabled(this.CB_Goblin.isSelected());
		if (!this.CB_Goblin.isSelected()) {
			this.SL_Goblin.setValue(0);
		}
	}// GEN-LAST:event_CB_GoblinActionPerformed

	/**
	 * Se ha modificado el Slider del goblin.
	 * 
	 * @param evt
	 */
	private void SL_GoblinStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SL_GoblinStateChanged
		// TODO add your handling code here:
		System.out.println("Slider: goblin modification");
		if (Integer.parseInt(this.SP_Goblin.getValue().toString()) != this.SL_Goblin.getValue()) {
			this.SP_Goblin.setValue(this.SL_Goblin.getValue());
		}
		if (SL_Goblin.getValue() > (Integer) this.previous.get(entities[GOBLIN]).getSecond() + this.totalMonsters
				- this.markedMonsters) {
			SL_Goblin.setValue(this.totalMonsters - this.markedMonsters);
		} else {
			this.current.put(entities[GOBLIN], SL_Goblin.getValue()); // Actualizar valor actual
			this.markedMonsters = this.markedMonsters
					+ (this.SL_Goblin.getValue() - (Integer) this.previous.get(entities[GOBLIN]).getSecond()); // Actualizar
																												// entidades
																												// marcadas
			this.previous.put(entities[GOBLIN], (Integer) this.current.get(entities[GOBLIN]).getSecond()); // Actualizar
																											// previo
																											// para
																											// siguiente
																											// cambio
			this.LB_MRestantes.setText(String.format("%d", this.totalMonsters - this.markedMonsters));

			this.vM.vD.update();
		}
	}// GEN-LAST:event_SL_GoblinStateChanged

	/**
	 * Se ha modificado el Spinner del goblin.
	 * 
	 * @param evt
	 */
	private void SP_GoblinStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SP_GoblinStateChanged
		// TODO add your handling code here:
		System.out.println("Spinner: goblin modification");
		if (Integer.parseInt(this.SP_Goblin.getValue().toString()) != this.SL_Goblin.getValue()) {
			this.SL_Goblin.setValue(Integer.parseInt(this.SP_Goblin.getValue().toString()));
		}
	}// GEN-LAST:event_SP_GoblinStateChanged

	/**
	 * Se ha modificado el estado del CheckBox de la mummy.
	 * 
	 * @param evt
	 */
	private void CB_MummyActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CB_MummyActionPerformed
		// TODO add your handling code here:
		System.out.println("Checkbox: Enabling/Disabling Mummy");
		this.SL_Mummy.setEnabled(this.CB_Mummy.isSelected());
		this.SP_Mummy.setEnabled(this.CB_Mummy.isSelected());
		if (!this.CB_Mummy.isSelected()) {
			this.SL_Mummy.setValue(0);
		}

	}// GEN-LAST:event_CB_MummyActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del swarm.
	 * 
	 * @param evt
	 */
	private void CB_EnjambreActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CB_EnjambreActionPerformed
		// TODO add your handling code here:
		System.out.println("Checkbox: Enabling/Disabling Swarm");
		this.SL_Enjambre.setEnabled(this.CB_Enjambre.isSelected());
		this.SP_Enjambre.setEnabled(this.CB_Enjambre.isSelected());
		if (!this.CB_Enjambre.isSelected()) {
			this.SL_Enjambre.setValue(0);
		}
	}// GEN-LAST:event_CB_EnjambreActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del vampire.
	 * 
	 * @param evt
	 */
	private void CB_VampireActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CB_VampireActionPerformed
		// TODO add your handling code here:
		System.out.println("Checkbox: Enabling/Disabling Vampire");
		this.SL_Vampire.setEnabled(this.CB_Vampire.isSelected());
		this.SP_Vampire.setEnabled(this.CB_Vampire.isSelected());
		if (!this.CB_Vampire.isSelected()) {
			this.SL_Vampire.setValue(0);
		}
	}// GEN-LAST:event_CB_VampireActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del Virus.
	 * 
	 * @param evt
	 */
	private void CB_VirusActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CB_VirusActionPerformed
		// TODO add your handling code here:
		System.out.println("Checkbox: Enabling/Disabling Virus");
		this.SL_Virus.setEnabled(this.CB_Virus.isSelected());
		this.SP_Virus.setEnabled(this.CB_Virus.isSelected());
		if (!this.CB_Virus.isSelected()) {
			this.SL_Virus.setValue(0);
		}
	}// GEN-LAST:event_CB_VirusActionPerformed

	/**
	 * Se ha modificado el estado del CheckBox del Guardían.
	 * 
	 * @param evt
	 */
	private void CB_GuardianActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CB_GuardianActionPerformed
		// TODO add your handling code here:
		System.out.println("Checkbox: Enabling/Disabling Guardian");
		this.SL_Guardian.setEnabled(this.CB_Guardian.isSelected());
		this.SP_Guardian.setEnabled(this.CB_Guardian.isSelected());
		if (!this.CB_Guardian.isSelected()) {
			this.SL_Guardian.setValue(0);
		}
	}// GEN-LAST:event_CB_GuardianActionPerformed

	/**
	 * Se ha modificado el Slider de la mummy.
	 * 
	 * @param evt
	 */
	private void SL_MummyStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SL_MummyStateChanged
		// TODO add your handling code here:
		System.out.println("Slider: Mummy modification");
		if (Integer.parseInt(this.SP_Mummy.getValue().toString()) != this.SL_Mummy.getValue()) {
			this.SP_Mummy.setValue(this.SL_Mummy.getValue());
		}
		if (SL_Mummy.getValue() > (Integer) this.previous.get(entities[MUMMY]).getSecond() + this.totalMonsters
				- this.markedMonsters) {
			SL_Mummy.setValue(this.totalMonsters - this.markedMonsters);
		} else {
			this.current.put(entities[MUMMY], SL_Mummy.getValue()); // Actualizar valor actual
			this.markedMonsters = this.markedMonsters
					+ (this.SL_Mummy.getValue() - (Integer) this.previous.get(entities[MUMMY]).getSecond()); // Actualizar
																												// entidades
																												// marcadas
			this.previous.put(entities[MUMMY], (Integer) this.current.get(entities[MUMMY]).getSecond()); // Actualizar
																											// previo
																											// para
																											// siguiente
																											// cambio
			this.LB_MRestantes.setText(String.format("%d", this.totalMonsters - this.markedMonsters));

			this.vM.vD.update();
		}
	}// GEN-LAST:event_SL_MummyStateChanged

	/**
	 * Se ha modificado el Slider del swarm.
	 * 
	 * @param evt
	 */
	private void SL_EnjambreStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SL_EnjambreStateChanged
		// TODO add your handling code here:
		System.out.println("Slider: Swarm modification");
		if (Integer.parseInt(this.SP_Enjambre.getValue().toString()) != this.SL_Enjambre.getValue()) {
			this.SP_Enjambre.setValue(this.SL_Enjambre.getValue());
		}
		if (SL_Enjambre.getValue() > (Integer) this.previous.get(entities[SWARM]).getSecond() + this.totalMonsters
				- this.markedMonsters) {
			SL_Enjambre.setValue(this.totalMonsters - this.markedMonsters);
		} else {
			this.current.put(entities[SWARM], SL_Enjambre.getValue()); // Actualizar valor actual
			this.markedMonsters = this.markedMonsters
					+ (this.SL_Enjambre.getValue() - (Integer) this.previous.get(entities[SWARM]).getSecond()); // Actualizar
																												// entidades
																												// marcadas
			this.previous.put(entities[SWARM], (Integer) this.current.get(entities[SWARM]).getSecond()); // Actualizar
																											// previo
																											// para
																											// siguiente
																											// cambio
			this.LB_MRestantes.setText(String.format("%d", this.totalMonsters - this.markedMonsters));

			this.vM.vD.update();
		}
	}// GEN-LAST:event_SL_EnjambreStateChanged

	/**
	 * Se ha modificado el Slider del vampire.
	 * 
	 * @param evt
	 */
	private void SL_VampireStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SL_VampireStateChanged
		// TODO add your handling code here:
		System.out.println("Slider: Vampire modification");
		if (Integer.parseInt(this.SP_Vampire.getValue().toString()) != this.SL_Vampire.getValue()) {
			this.SP_Vampire.setValue(this.SL_Vampire.getValue());
		}
		if (SL_Vampire.getValue() > (Integer) this.previous.get(entities[VAMPIRE]).getSecond() + this.totalMonsters
				- this.markedMonsters) {
			SL_Vampire.setValue(this.totalMonsters - this.markedMonsters);
		} else {
			this.current.put(entities[VAMPIRE], SL_Vampire.getValue()); // Actualizar valor actual
			this.markedMonsters = this.markedMonsters
					+ (this.SL_Vampire.getValue() - (Integer) this.previous.get(entities[VAMPIRE]).getSecond()); // Actualizar
																													// entidades
																													// marcadas
			this.previous.put(entities[VAMPIRE], (Integer) this.current.get(entities[VAMPIRE]).getSecond()); // Actualizar
																												// previo
																												// para
																												// siguiente
																												// cambio
			this.LB_MRestantes.setText(String.format("%d", this.totalMonsters - this.markedMonsters));

			this.vM.vD.update();
		}
	}// GEN-LAST:event_SL_VampireStateChanged

	/**
	 * Se ha modificado el Slider del Virus.
	 * 
	 * @param evt
	 */
	private void SL_VirusStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SL_VirusStateChanged
		// TODO add your handling code here:
		System.out.println("Slider: Virus modification");
		if (Integer.parseInt(this.SP_Virus.getValue().toString()) != this.SL_Virus.getValue()) {
			this.SP_Virus.setValue(this.SL_Virus.getValue());
		}
		if (SL_Virus.getValue() > (Integer) this.previous.get(entities[VIRUS]).getSecond() + this.totalMonsters
				- this.markedMonsters) {
			SL_Virus.setValue(this.totalMonsters - this.markedMonsters);
		} else {
			this.current.put(entities[VIRUS], SL_Virus.getValue()); // Actualizar valor actual
			this.markedMonsters += (this.SL_Virus.getValue()
					- (Integer) this.previous.get(entities[VIRUS]).getSecond()); // Actualizar entidades marcadas
			this.previous.put(entities[VIRUS], (Integer) this.current.get(entities[VIRUS]).getSecond()); // Actualizar
																											// previo
																											// para
																											// siguiente
																											// cambio
			this.LB_MRestantes.setText(String.format("%d", this.totalMonsters - this.markedMonsters));

			this.vM.vD.update();
		}
	}// GEN-LAST:event_SL_VirusStateChanged

	/**
	 * Se ha modificado el Slider del guardian.
	 * 
	 * @param evt
	 */
	private void SL_GuardianStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SL_GuardianStateChanged
		// TODO add your handling code here:
		System.out.println("Slider: Guardian modification");
		if (Integer.parseInt(this.SP_Guardian.getValue().toString()) != this.SL_Guardian.getValue()) {
			this.SP_Guardian.setValue(this.SL_Guardian.getValue());
		}
		if (SL_Guardian.getValue() > (Integer) this.previous.get(entities[GUARDIAN]).getSecond() + this.totalMonsters
				- this.markedMonsters ||
				SL_Guardian.getValue() > (Integer) this.previous.get(entities[GUARDIAN]).getSecond() + this.totalHeroes
						- this.markedHeroes) {
			SL_Guardian
					.setValue(Math.min(this.totalMonsters - this.markedMonsters, this.totalHeroes - this.markedHeroes));
		} else {
			this.current.put(entities[GUARDIAN], SL_Guardian.getValue()); // Actualizar valor actual
			this.markedHeroes += (this.SL_Guardian.getValue()
					- (Integer) this.previous.get(entities[GUARDIAN]).getSecond()); // Actualizar entidades marcadas
			this.markedMonsters += (this.SL_Guardian.getValue()
					- (Integer) this.previous.get(entities[GUARDIAN]).getSecond()); // Actualizar entidades marcadas
			this.previous.put(entities[GUARDIAN], (Integer) this.current.get(entities[GUARDIAN]).getSecond()); // Actualizar
																												// previo
																												// para
																												// siguiente
																												// cambio
			this.LB_MRestantes.setText(String.format("%d", this.totalMonsters - this.markedMonsters));
			this.LB_HRestantes.setText(String.format("%d", this.totalHeroes - this.markedHeroes));

			this.vM.vD.update();
		}
	}// GEN-LAST:event_SL_GuardianStateChanged

	/**
	 * Se ha modificado el Spinner de la mummy.
	 * 
	 * @param evt
	 */
	private void SP_MummyStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SP_MummyStateChanged
		// TODO add your handling code here:
		System.out.println("Spinner: Mummy modification");
		if (Integer.parseInt(this.SP_Mummy.getValue().toString()) != this.SL_Mummy.getValue()) {
			this.SL_Mummy.setValue(Integer.parseInt(this.SP_Mummy.getValue().toString()));
		}
	}// GEN-LAST:event_SP_MummyStateChanged

	/**
	 * Se ha modificado el Spinner del swarm.
	 * 
	 * @param evt
	 */
	private void SP_EnjambreStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SP_EnjambreStateChanged
		// TODO add your handling code here:
		System.out.println("Spinner: Swarm modification");
		if (Integer.parseInt(this.SP_Enjambre.getValue().toString()) != this.SL_Enjambre.getValue()) {
			this.SL_Enjambre.setValue(Integer.parseInt(this.SP_Enjambre.getValue().toString()));
		}
	}// GEN-LAST:event_SP_EnjambreStateChanged

	/**
	 * Se ha modificado el Spinner del vampire
	 * 
	 * @param evt
	 */
	private void SP_VampireStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SP_VampireStateChanged
		// TODO add your handling code here:
		System.out.println("Spinner: Vampire modification");
		if (Integer.parseInt(this.SP_Vampire.getValue().toString()) != this.SL_Vampire.getValue()) {
			this.SL_Vampire.setValue(Integer.parseInt(this.SP_Vampire.getValue().toString()));
		}
	}// GEN-LAST:event_SP_VampireStateChanged

	/**
	 * Se ha modificado el Spinner del Virus.
	 * 
	 * @param evt
	 */
	private void SP_VirusStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SP_VirusStateChanged
		// TODO add your handling code here:
		System.out.println("Spinner: Virus modification");
		if (Integer.parseInt(this.SP_Virus.getValue().toString()) != this.SL_Virus.getValue()) {
			this.SL_Virus.setValue(Integer.parseInt(this.SP_Virus.getValue().toString()));
		}
	}// GEN-LAST:event_SP_VirusStateChanged

	/**
	 * Se ha modificado el Spinner del guardian.
	 * 
	 * @param evt
	 */
	private void SP_GuardianStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_SP_GuardianStateChanged
		// TODO add your handling code here:
		System.out.println("Spinner: Guardian modification");
		if (Integer.parseInt(this.SP_Guardian.getValue().toString()) != this.SL_Guardian.getValue()) {
			this.SL_Guardian.setValue(Integer.parseInt(this.SP_Guardian.getValue().toString()));
		}
	}// GEN-LAST:event_SP_GuardianStateChanged

	/**
	 * Asigna los límites a todos los sliders, spinners y etiquetas de la pantalla.
	 * 
	 * @param heroes   Número máximo de héroes.
	 * @param monsters Número máximo de monstruos.
	 */
	public void setLimites(int heroes, int monsters) {
		System.out.println("Entity customization: Creating entity limits");
		this.totalMonsters = monsters; // Monstruos totales
		this.totalHeroes = heroes; // Heroes totales

		// Estado inicial de estructura, sliders y spinners.
		for (int i = 0; i < 8; i++) {
			this.previous.put(entities[i], 0);
			this.current.put(entities[i], 0);
			this.entitiesSliders[i].setMaximum(this.totalMonsters);
			this.entitiesSpinners[i].setModel(new SpinnerNumberModel(
					Integer.parseInt(String.format("%d", this.entitiesSpinners[i].getModel().getValue())), 0,
					this.totalMonsters, 1));
		}

		// Maximos de sliders y spinners para heroes
		this.entitiesSpinners[DWARF].setModel(new SpinnerNumberModel(
				Integer.parseInt(String.format("%d", this.entitiesSpinners[DWARF].getModel().getValue())), 0,
				this.totalHeroes, 1));
		this.entitiesSpinners[BARBARIAN].setModel(new SpinnerNumberModel(
				Integer.parseInt(String.format("%d", this.entitiesSpinners[BARBARIAN].getModel().getValue())), 0,
				this.totalHeroes, 1));
		this.SL_Barbarian.setMaximum(this.totalMonsters);
		this.SL_Dwarf.setMaximum(this.totalHeroes);

		// Valores por defecto de heroes y monstruos
		this.SL_Barbarian.setValue(this.totalHeroes);
		this.SL_Mummy.setValue(this.totalMonsters);
		this.SP_Barbarian.setValue(this.totalHeroes);
		this.SP_Mummy.setValue(this.totalMonsters);

		// Contadores de entidades marcadas
		this.markedHeroes = this.SL_Barbarian.getValue();
		this.markedMonsters = this.SL_Mummy.getValue();

		// Actualización de estructuras
		// NOTA: JSlider.setValue(Integer) no acciona un stateChanged.
		this.previous.put(entities[BARBARIAN], this.SL_Barbarian.getValue());
		this.current.put(entities[BARBARIAN], this.SL_Barbarian.getValue());
		this.previous.put(entities[MUMMY], this.SL_Mummy.getValue());
		this.current.put(entities[MUMMY], this.SL_Mummy.getValue());

		// Actualizacion de etiquetas
		this.LB_HRestantes.setText(String.format("%d", this.totalHeroes - this.markedHeroes));
		this.LB_MRestantes.setText(String.format("%d", this.totalMonsters - this.markedMonsters));
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel.
		 * For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(PersonalizarEntidades.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(PersonalizarEntidades.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(PersonalizarEntidades.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(PersonalizarEntidades.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new PersonalizarEntidades().setVisible(true);
			}
		});
	}

	private EntityHashMap current;
	private EntityHashMap previous;

	private int markedMonsters;
	private int totalMonsters;
	private int totalHeroes;
	private int markedHeroes;

	master vM;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton BT_Aceptar;
	private javax.swing.JButton BT_Cancelar;
	private javax.swing.JButton BT_VistaPrevia;
	private javax.swing.JCheckBox CB_Barbarian;
	private javax.swing.JCheckBox CB_Dwarf;
	private javax.swing.JCheckBox CB_Enjambre;
	private javax.swing.JCheckBox CB_Goblin;
	private javax.swing.JCheckBox CB_Guardian;
	private javax.swing.JCheckBox CB_Mummy;
	private javax.swing.JCheckBox CB_Vampire;
	private javax.swing.JCheckBox CB_Virus;
	private javax.swing.JLabel LB_HRestantes;
	private javax.swing.JLabel LB_MRestantes;
	private javax.swing.JSlider SL_Barbarian;
	private javax.swing.JSlider SL_Dwarf;
	private javax.swing.JSlider SL_Enjambre;
	private javax.swing.JSlider SL_Goblin;
	private javax.swing.JSlider SL_Guardian;
	private javax.swing.JSlider SL_Mummy;
	private javax.swing.JSlider SL_Vampire;
	private javax.swing.JSlider SL_Virus;
	private javax.swing.JSpinner SP_Barbarian;
	private javax.swing.JSpinner SP_Dwarf;
	private javax.swing.JSpinner SP_Enjambre;
	private javax.swing.JSpinner SP_Goblin;
	private javax.swing.JSpinner SP_Guardian;
	private javax.swing.JSpinner SP_Mummy;
	private javax.swing.JSpinner SP_Vampire;
	private javax.swing.JSpinner SP_Virus;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JSeparator jSeparator1;
	// End of variables declaration//GEN-END:variables
}
